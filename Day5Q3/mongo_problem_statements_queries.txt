1. Retrieve documents from the orders in ascending order by total:
   db.orders.find().sort({ total: 1 });

2. Retrieve the oldest paymentMethod from the payments collection as "_id":
   db.payments.find({}, { paymentMethod: 1 }).sort({ payment_date: 1 }).limit(1);

3. Retrieve the 2nd and 3rd buyers from the buyers collection:
   db.customers.find().skip(1).limit(2);

4. Retrieve the most expensive product from order_details:
   db.order_details.find().sort({ price: -1 }).limit(1);

5. Retrieve the first order from the orders as per the order_date:
   db.orders.find().sort({ order_date: 1 }).limit(1);

6. Retrieve the last 3 orders from the orders collection who have less total amount:
   db.orders.find().sort({ total: 1 }).limit(3).sort({ order_date: -1 });

7. Retrieve the most recent shipped order from the orders collection:
   db.orders.find({ status: "shipped" }).sort({ ship_date: -1 }).limit(1);

8. Get the total revenue from all orders:
   db.orders.aggregate([ { $group: { _id: null, totalRevenue: { $sum: "$total" } } } ]);

9. Retrieve all the orders that shipped before 2022-05-26:
   db.orders.find({ ship_date: { $lt: new Date("2022-05-26") } });

10. Find the maximum price as maxPrice of products and their names as name for each category:
    db.products.aggregate([ { $group: { _id: "$category_id", maxPrice: { $max: "$price" }, name: { $first: "$name" } } } ]);

11. Find the most used payment method as paymentMethod and the number of times it is used as count:
    db.payments.aggregate([ { $group: { _id: "$paymentMethod", count: { $sum: 1 } } } ]);

12. Find the total count of orders by status:
    db.orders.aggregate([ { $group: { _id: "$status", count: { $sum: 1 } } } ]);

13. Retrieve the orders grouped by customer_id with the max total:
    db.orders.aggregate([ { $group: { _id: "$customer_id", maxTotal: { $max: "$total" } } } ]);