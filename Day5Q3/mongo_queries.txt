1. Display all documents in the collection `restaurants`:
   db.restaurants.find({});

2. Display the fields `restaurant_id`, `name`, `borough`, and `cuisine` for all documents:
   db.restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

3. Display the fields `restaurant_id`, `name`, `borough`, and `cuisine`, excluding the `_id` field:
   db.restaurants.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

4. Display all restaurants located in the borough Bronx:
   db.restaurants.find({ borough: "Bronx" });

5. Display the first 5 restaurants located in the borough Bronx:
   db.restaurants.find({ borough: "Bronx" }).limit(5);

6. Display the next 5 restaurants after skipping the first 5 located in the borough Bronx:
   db.restaurants.find({ borough: "Bronx" }).skip(5).limit(5);

7. Find restaurants that achieved a score of more than 90:
   db.restaurants.find({ score: { $gt: 90 } });

8. Find restaurants that achieved a score of more than 80 but less than 100:
   db.restaurants.find({ score: { $gt: 80, $lt: 100 } });

9. Find restaurants located at a latitude value less than -95.754168:
   db.restaurants.find({ "address.coord.1": { $lt: -95.754168 } });

10. Find restaurants that do not prepare any cuisine of 'American', have a grade score more than 70, and latitude less than -65.754168:
    db.restaurants.find({
      cuisine: { $ne: "American" },
      score: { $gt: 70 },
      "address.coord.1": { $lt: -65.754168 }
    });

11. Find restaurants that do not prepare any cuisine of 'American', have a grade score more than 70, and are located in longitude less than -65.754168 (without using `$and` operator):
    db.restaurants.find({
      cuisine: { $ne: "American" },
      score: { $gt: 70 },
      "address.coord.0": { $lt: -65.754168 }
    });

12. Find restaurant Id, name, borough, and cuisine for those restaurants that contain 'Wil' as the first three letters of their name:
    db.restaurants.find({ name: { $regex: /^Wil/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

13. Find restaurant Id, name, borough, and cuisine for those restaurants that contain 'ces' as the last three letters of their name:
    db.restaurants.find({ name: { $regex: /ces$/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

14. Find restaurant Id, name, borough, and cuisine for those restaurants that contain 'Reg' as three letters somewhere in their name:
    db.restaurants.find({ name: { $regex: /Reg/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

15. Arrange the names of the restaurants in ascending order along with all the columns:
    db.restaurants.find().sort({ name: 1 });

16. Arrange the names of the cuisine in ascending order, with the same cuisine's borough in descending order:
    db.restaurants.find().sort({ cuisine: 1, borough: -1 });